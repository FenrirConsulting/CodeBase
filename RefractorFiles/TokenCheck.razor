

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    [Inject]
    private ITokenService? TokenService { get; set; }

    [Inject]
    private NavigationManager? _NavigationManager { get; set; }

    [Inject]
    private ILogger<TokenCheck>? _logger { get; set; }

    private Timer? _tokenRefreshTimer;


    protected override async Task OnInitializedAsync()
    {
        // Initialize the timer to check the token status every 5 minutes.
        _tokenRefreshTimer = new Timer(CheckAndRefreshToken, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));
    }

    private async void CheckAndRefreshToken(object? state)
    {
        try
        {
            var authState = await AuthenticationState!;
            var user = authState.User;
            await TokenService!.RefreshToken(user);
        }
        catch (CustomInteractiveSignInRequiredException)
        {
            _NavigationManager!.NavigateTo("/authentication/login", forceLoad: true);
        }
        catch(Exception ex)
        {
            _logger!.LogError(ex, "Error serializing session value for key {Key}");
        }
    }

    // Dispose timer on Component Disposed to clean up resources
    public void Dispose()
    {
        _tokenRefreshTimer?.Dispose();
    }

}
